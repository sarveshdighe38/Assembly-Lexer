
-- Each instruction is separated by one or more '\n'

P   := '(' S R ')'
S   := '$'[a-z][a-z0-9]*
R   := T | T R
T   := '(' S [0-9]+ I ')'
I   := ii | ii I | lb ii I | lb ii
lb  := ':' [a-z][a-z0-9]*
ii  := M "<-" G | G "<-" M | "return" | A | B
M   := "mem" G '#'d8 | "mem" "FP" '#'d8
d8  := "-0x"[0-9A-F]*[08] | "0x"[0-9A-F]*[08]   -- Hex Numbers divisible by 8
G   := G32 | G64
V32 := G32 | '#'[0-9]+ 
V64 := G64 | '#'[0-9]+ 
G32 := W0 |.......| W28
G64 := X0 |.......| X28 | SP
A   := G32 OP V32 | G64 OP V64 | G64 "<-" G64 BO V64 | G32 "<-" G32 BO V32
BO  := + | - | * | << | >>              -- >> and << are shift operators
OP  := BO "<-"




Your task is to check whether given text follows given rules and 
is correct as per the constraints discussed in class.
Return the equivalent assembly translation of the input.


   sbr translate(s : &[u8], d : &var [u8])
       -- input is given in array s and write trasnlated assembly in d
       -- You can assume there is enough space in d
   rbs


